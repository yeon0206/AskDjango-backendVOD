"""
Django settings for askdjango project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7z+k9odv3y7j^n22c#)bs$yg4h=(#3nqzlcs623%(3n_i9w@=l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#프로젝트/urls.py에 지정도 안해줬는데 어떻게 응답처리?
#개발환경에서의 static파일 서빙 지원(when, DEBUG=True)
#개발목적!으로만 제공(python manage.py runserver)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin', #장고 기본디렉토리 앱 6가지
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'django_extensions',
    'bootstrap3',
    'accounts',
    'blog', #생성한 앱 등록 필수!!
    'dojo',
    'shop',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'askdjango.urls' #최상위 urlconf로 정한다.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ # filesystem.Loader
            os.path.join(BASE_DIR, 'askdjango', 'templates'),
        ],
        'APP_DIRS': True, #등록된 앱  app_directories.Loader
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'askdjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/' #각 static 파일에 대한 URL Prefix, view url처럼
STATICFILES_DIRS=[ #FileSystemFinder를 위한 static 디렉토리 목록
    os.path.join(BASE_DIR, 'askdjango','static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#python manage.py collectstatic으로 폴더생성 및 흩어진 static을 모아줌



# NOTEBOOK_KERNEL_SPEC_NAMES = ['Python [Root]'] #일반 shell에서 django로 접근하는방법
'''
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproj.settings') # FIXME: 경로 확인
import django
django.setup()
# 지금부터 모든 장고환경에 접근 가능
from blog.models import Post
일반 쉘에서도 장고 환경에 접근은 가능하나
django shell을 쓰는 것이 편리
'''

INTERNAL_IPS = ['127.0.0.1']

from django.contrib.messages import constants

MESSAGE_LEVEL = constants.DEBUG #지금부터 debug레벨의 messages를 남길 수 있음..
MESSAGE_TAGS ={constants.ERROR: 'danger'}